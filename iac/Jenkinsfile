pipeline {
    agent any

    environment {
        // Azure Components
        AZURE_DEFAULT_REGION = "westeurope"
        RG_NAME="BU-MT"
        AKS_NAME = "rome"

        // Docker Images
        GitLeaksImageTag = 'zricethezav/gitleaks:latest'
    }

    stages {
        stage('Azure Login') {
            steps {
                script {
                    dir('iac/terraform'){
                        withCredentials([usernamePassword(credentialsId: "certimetergroup_creds", usernameVariable: "AZURE_USERNAME", passwordVariable: "AZURE_PASSWORD")]) {     
                            sh 'az login --username $AZURE_USERNAME --password $AZURE_PASSWORD'
                        } 
                    }
                }
            }
        }
/*
        stage('Trivy Secret Scanning'){
            steps {
                script {
                    dir('iac/terraform'){ 
                        sh 'trivy filesystem . --trace'
                        sh 'trivy filesystem --format=json .'
                    }
                }
            }
            
        }
*/
        stage('GitLeaks Secret Scanning'){
            steps{
                script{
                    try{
                        // Pull the GitLeaks image
                        sh "docker image pull $GitLeaksImageTag"
                        // Run GitLeaks
                        def GitLeaksScan = sh (script: "docker run --rm -v .:/path $GitLeaksImageTag detect --source=/path --no-color --verbose", returnStatus: true)
                        if (GitLeaksScan == 1) {
                            echo("GitLeaks Secret Scan successfully executed, no secrets found in your code.")
                        }
                        else{
                            unstable("WARNING!!! Secrets found in your code")
                            input "Do you want the pipeline to go ahead? There are UNENCRYPTED SECRETS in your code, be aware and choose wisely."
                        }
                    }
                    catch( Exception ex ){
                        error("Secret Scanning terminated with an error : ${ex.message}")
                    }   
                }
            }
                

        }

        
        stage('Terraform Init') {
            steps {
                dir('iac/terraform'){
                    //withCredentials([string(credentialsId: 'AzureStorageAccessKey', variable: 'AZURE_ACCESS_KEY')]) {
                    //        sh 'terraform init -upgrade -backend-config="access_key=${AZURE_ACCESS_KEY}"'
                    //}
                    sh 'terraform init -upgrade'
                }
            }
        }


        stage('Terraform Validate') {
            steps {
                dir('iac/terraform'){
                    sh "terraform validate"
                }
            }
        }

        stage('Tfsec'){
            steps {
                dir('iac/terraform'){
                    sh 'tfsec -s'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('iac/terraform'){
                    script{
                        withCredentials([usernamePassword(credentialsId: "ClientIdClientSecret", usernameVariable: "CLIENT_ID", passwordVariable: "CLIENT_SECRET")]) {     
                            sh "terraform plan -var='appId=${CLIENT_ID}' -var='password=${CLIENT_SECRET}'"
                        } 
                    }
                }   
            }        
        }

        stage('Plan approval') {
            steps {
                input "Approve the previously generated plan?"
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('iac/terraform'){
                    script{
                        withCredentials([usernamePassword(credentialsId: "ClientIdClientSecret", usernameVariable: "CLIENT_ID", passwordVariable: "CLIENT_SECRET")]) {
                            sh "terraform apply -var='appId=${CLIENT_ID}' -var='password=${CLIENT_SECRET}' -auto-approve"
                        }
                    }
                }
            }
        }

        stage('Cluster deployed or not? (stop if not)') {
            steps {
                input "Cluster deployed or not? (stop if not)"
            }
        }
        
        stage('Configurazione kubectl') {
            steps {
                sh 'az aks get-credentials --name $AKS_NAME --resource-group $RG_NAME --overwrite-existing'
            }
        }

        stage('Verifica cluster') {
            steps {
                sh "kubectl cluster-info"
            }
        }
/*
        stage('Setup Prometheus and Graphana with Helm'){ 
            steps {
                dir('iac'){
                    sh 'kubectl apply -f ingress.yaml'
                }
            }
        }
*/
        /*
        stage('Piano distruzione Terraform') {
            steps {
                dir('iac/terraform'){
                    sh "terraform plan -destroy"
                }
            }
        }
        stage('Approvazione destroy Infrastruttura') {
            steps {
                input "Approvazione destroy infrastruttura?"
            }
        }
        stage('Destroy Infrastruttura') {
            steps {
                dir('iac/terraform'){
                    sh "terraform destroy -auto-approve"
                }
            }
        }
        */
    }
}