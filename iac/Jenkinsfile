pipeline {
    agent any

    
    parameters {
        choice(
            name: 'scanMode',
            choices: ['prod', 'prod_no_security', 'dev'],
            description: 'Select the Scan mode: <dev> : Will run checks without interrupting the pipeline, useful in development. <prod_no_security> : Will skip security checks in production.     <prod> : Will run full checks and stop in case of severe vulnerabilities (HIGH, CRITICAL) '
        )
    }

    environment {
        // Azure Components
        AZURE_DEFAULT_REGION = "westeurope"
        RG_NAME="BU-MT"
        AKS_NAME = "rom1"

        // Docker Images
        GitLeaksImageTag = 'zricethezav/gitleaks:latest'
        TfsecImageTag = 'aquasec/tfsec:latest'
    }

    stages {
        stage('Azure Login') {
            steps {
                script {
                    dir('iac/terraform1'){
                        withCredentials([usernamePassword(credentialsId: "certimetergroup_creds", usernameVariable: "AZURE_USERNAME", passwordVariable: "AZURE_PASSWORD")]) {     
                            sh 'az login --username $AZURE_USERNAME --password $AZURE_PASSWORD'
                        } 
                    }
                }
            }
        }
/*
        stage('Trivy Secret Scanning'){
            steps {
                script {
                    dir('iac/terraform'){ 
                        sh 'trivy filesystem . --trace'
                        sh 'trivy filesystem --format=json .'
                    }
                }
            }
            
        }
*/
        stage('GitLeaks Secret Scanning'){
            steps{
                script{
                    try{
                        if (params.scanMode == 'prod_no_security') {
                            echo("No security mode detected, skipping the actual security check")
                            return
                        }

                        // Pull the GitLeaks image
                        sh "sudo docker image pull $GitLeaksImageTag"

                        //DEV MODE
                        if(params.scanMode == 'dev') {
                            // Run GitLeaks
                            def GitLeaksScan = sh (script: "sudo docker run --rm -v .:/path $GitLeaksImageTag detect --source=/path --no-color --verbose", returnStatus: true)
                            if (GitLeaksScan == 0) {
                                echo("GitLeaks Secret Scan successfully executed, no secrets found in your code.")
                            }
                            else{
                                unstable("WARNING!!! Secrets found in your code")
                                input "Do you want the pipeline to go ahead? There are UNENCRYPTED SECRETS in your code, be aware and choose wisely."
                            }
                        }
                        //PROD MODE
                        //there is no filter in secret scanning, it's not possible to set a severity level
                        else{
                            // Run GitLeaks 
                            def GitLeaksScan = sh (script: "sudo docker run --rm -v .:/path $GitLeaksImageTag detect --source=/path --no-color --verbose", returnStatus: true)
                            if (GitLeaksScan == 0) {
                                echo("GitLeaks Secret Scan successfully executed, no secrets found in your code.")
                            }
                            else{
                                error("WARNING!!! Secrets found in your code")
                                echo("Application stopped. There are UNENCRYPTED SECRETS in your code.")
                            }
                        }
                    }
                    catch( Exception ex ){
                        error("Secret Scanning terminated with an error : ${ex.message}")
                    }  
                }
            }
                

        }

        
        stage('Terraform Init') {
            steps {
                dir('iac/terraform1'){
                    sh 'terraform init -upgrade'
                }
            }
        }


        stage('Terraform Validate') {
            steps {
                dir('iac/terraform1'){
                    sh "terraform validate"
                }
            }
        }

        stage('Tfsec'){
            steps {
                script{
                    try{
                        if (params.scanMode == 'prod_no_security') {
                            echo("No security mode detected, skipping the actual security check")
                            return
                        }
                        
                        // Pull the Tfsec image
                        sh "sudo docker image pull $TfsecImageTag"

                        dir('iac/terraform1'){
                            //DEV MODE
                            if(params.scanMode == 'dev') {
                                // Run Tfsec
                                def TfsecScan = sh (script: "sudo docker run --rm --tty -v .:/path $TfsecImageTag .", returnStatus: true)
                                if (TfsecScan == 0) {
                                    echo("Tfsec Scan successfully executed, no vulnerabilities found in your code.")
                                }
                                else{
                                    unstable("WARNING!!! Vulnerabilities found in your code")
                                    input "Do you want the pipeline to go ahead? There are VULNERABILITIES in your HCL TERRAFORM code, be aware and choose wisely."
                                }
                            }
                            //PROD MODE
                            else{
                                // Run Tfsec 
                                def TfsecScan = sh (script: "sudo docker run --rm --tty -v .:/path $TfsecImageTag .  -m HIGH", returnStatus: true)
                                if (TfsecScan == 0) {
                                    echo("Tfsec Scan successfully executed, no secrets found in your code.")
                                }
                                else{
                                    error("WARNING!!! Vulnerabilities found in your code")
                                    echo("Application stopped. There are VULNERABILITIES in your HCL TERRAFORM code.")
                                }
                            }
                        }
                    }
                    catch( Exception e){
                        error("Tfsec terminated with an error : ${ex.message}")    
                    }
                }

            }
        }

        stage('Terraform Plan') {
            steps {
                dir('iac/terraform1'){
                    script{
                        withCredentials([usernamePassword(credentialsId: "ClientIdClientSecret", usernameVariable: "CLIENT_ID", passwordVariable: "CLIENT_SECRET")]) {     
                            sh "terraform plan -var='appId=${CLIENT_ID}' -var='password=${CLIENT_SECRET}'"
                        } 
                    }
                }   
            }        
        }

        stage('Plan approval') {
            steps {
                script{
                    if(params.scanMode == 'dev'){
                    input "Approve the previously generated plan?"
                    }
                    else{
                        echo(" No need to approve in prod mode, for automation reasons")
                    }
                }
                
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('iac/terraform1'){
                    script{
                        withCredentials([usernamePassword(credentialsId: "ClientIdClientSecret", usernameVariable: "CLIENT_ID", passwordVariable: "CLIENT_SECRET")]) {
                            sh "terraform apply -var='appId=${CLIENT_ID}' -var='password=${CLIENT_SECRET}' -auto-approve"
                        }
                    }
                }
            }
        }

        
        stage('Configurazione kubectl') {
            steps {
                sh 'az aks get-credentials --name $AKS_NAME --resource-group $RG_NAME --overwrite-existing'
            }
        }

        stage('Verifica cluster') {
            steps {
                sh "kubectl cluster-info"
            }
        }

        stage('Monitoring') {
            steps {
                script{
                    sh 'az aks get-credentials --name $AKS_NAME --resource-group $RG_NAME --overwrite-existing'
                    sh 'kubectl --kubeconfig /var/lib/jenkins/.kube/config cluster-info'
                    
                    dir('iac/kube-state-metrics') {
                        sh 'kubectl apply -f .'
                    }
                    
                    dir('iac/prometheus') {
                        sh 'kubectl create namespace monitoring || true'
                        sh 'kubectl apply -f .'
                    }

                    dir('iac/dashboard') {
                        sh 'kubectl apply -f .'
                        sh 'kubectl create serviceaccount dashboard -n kubernetes-dashboard || true'
                        sh 'kubectl create clusterrolebinding dashboard-admin -n kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard || true'
                        
                        script {
                            def tokendashboard = sh(returnStdout: true, script: "kubectl -n kubernetes-dashboard create token dashboard")
                            echo "K8s dashboard access token: ${tokendashboard}"
                        }
                    }
                    sh 'kubectl create deployment grafana --image=docker.io/grafana/grafana:latest -n monitoring || true'
                    sh 'kubectl expose deployment grafana --type LoadBalancer --port 3000 -n monitoring || true'
                    
                    script {
                        def grafana_url = sh(returnStdout: true, script: "kubectl get service grafana -n monitoring --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}'")
                        echo "Grafana accessibile da ${grafana_url}:3000"
                    }
                }      
            }
        }
        /*
        stage('Piano distruzione Terraform') {
            steps {
                dir('iac/terraform'){
                    sh "terraform plan -destroy"
                }
            }
        }
        stage('Approvazione destroy Infrastruttura') {
            steps {
                input "Approvazione destroy infrastruttura?"
            }
        }
        stage('Destroy Infrastruttura') {
            steps {
                dir('iac/terraform'){
                    sh "terraform destroy -auto-approve"
                }
            }
        }
        */
    }
}